<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.matchandtrade</groupId>
	<artifactId>matchandtrade-web-api</artifactId>
	<version>0.0.3-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Match And Trade RESTful Web API</name>
	<description>Match and Trade REST Web Service</description>

	<licenses>
		<license>
			<name>MIT License</name>
			<url>https://github.com/rafasantos/matchandtrade/blob/master/LICENSE.txt</url>
			<comments>Open source, can distribute, can modify, cannot hold liable, provided "as is"</comments>
		</license>
	</licenses>

	<properties>
		<!-- Plugin and dependency versions -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<com.h2database.version>1.4.195</com.h2database.version>
		<org.apache.httpcomponents.httpclient>4.5.2</org.apache.httpcomponents.httpclient>
		<io.springfox.version>2.6.0</io.springfox.version>
		<cobertura-maven-plugin.version>2.7</cobertura-maven-plugin.version>
		<apache-commons-cli>1.3.1</apache-commons-cli>
		<org.jacoco.version>0.7.9</org.jacoco.version>
		<org.springframework.boot.version>1.5.3.RELEASE</org.springframework.boot.version>
	</properties>

	<!-- Using Spring Boot without the parent POM. See: https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${org.springframework.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Spring Boot. Substitutes spring-boot-starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Spring Web. Substitutes spring-boot-starter-web -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>

		<!-- JPA dependencies. Substitutes spring-boot-starter-data-jpa -->
		<!-- TODO: Expand starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- JAXRS. Substitutes spring-boot-starter-jersey -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.0</version>
		</dependency>

		<!-- Spring HATEOAS. Substitutes spring-boot-starter-hateoas -->
		<dependency>
			<groupId>org.springframework.hateoas</groupId>
			<artifactId>spring-hateoas</artifactId>
		</dependency>

		<!-- Testing. Substitutes spring-boot-starter-test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-test</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>

		<!-- H2 Database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
			<version>${com.h2database.version}</version>
		</dependency>

		<!-- C3P0 http://www.mchange.com/projects/c3p0 -->
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.5.2</version>
		</dependency>

		<!-- Apache HttpComponents -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>

		<!-- Apache Commons CLI -->
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>${apache-commons-cli}</version>
		</dependency>

	</dependencies>

	<profiles>
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- failsafeArgLine and surefireArgLine are created by jacoco on the 'site' profile -->
				<!-- Setting as empty or it will break failsafe and surefire plugins -->
				<failsafeArgLine> </failsafeArgLine>
				<surefireArgLine> </surefireArgLine>
			</properties>
		</profile>
		<profile>
			<id>site</id>
			<dependencies>
				<dependency>
				    <groupId>javax.interceptor</groupId>
				    <artifactId>javax.interceptor-api</artifactId>
				    <version>1.2</version>
				</dependency>
			</dependencies>
			<properties>
				<!-- failsafeArgLine and surefireArgLine are created by jacoco on the 'site' profile -->
				<!-- Setting as empty or it will break failsafe and surefire plugins -->
				<failsafeArgLine> </failsafeArgLine>
				<surefireArgLine> </surefireArgLine>
			</properties>
		</profile>
		<profile>
			<id>jacoco</id>
			<build>
				<plugins>
					<!-- Testing Code Coverage -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${org.jacoco.version}</version>
						<executions>
							<!-- Prepares the property pointing to the JaCoCo runtime agent which is passed as VM argument when Maven the Surefire plugin is executed. -->
							<execution>
								<id>pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<destFile>${project.reporting.outputDirectory}/jacoco-ut.exec</destFile>
									<!-- Sets the name of the property containing the settings for JaCoCo runtime agent. -->
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
							<!-- Ensures that the code coverage report for unit tests is created after unit tests have been run. -->
							<execution>
								<id>post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${project.reporting.outputDirectory}/jacoco-ut.exec</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
								</configuration>
							</execution>
		
							<!-- Prepares the property pointing to the JaCoCo runtime agent which is passed as VM argument when Maven the Failsafe plugin is executed. -->
							<execution>
								<id>pre-integration-test</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<destFile>${project.reporting.outputDirectory}/jacoco-it.exec</destFile>
									<!-- Sets the name of the property containing the settings for JaCoCo runtime agent. -->
									<propertyName>failsafeArgLine</propertyName>
								</configuration>
							</execution>
							<!-- Ensures that the code coverage report for integration tests after integration tests have been run. -->
							<execution>
								<id>post-integration-test</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${project.reporting.outputDirectory}/jacoco-it.exec</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
								</configuration>
							</execution>
		
							<!-- Merge both Unit Tests + Integration Tests in a single dataFile -->
							<execution>
								<id>merge-data-file</id>
								<phase>verify</phase>
								<goals>
									<goal>merge</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<destFile>${project.reporting.outputDirectory}/jacoco-merge.exec</destFile>
									<fileSets>
										<fileSet>
											<directory>${project.reporting.outputDirectory}</directory>
											<include>*.exec</include>
										</fileSet>
									</fileSets>
								</configuration>
							</execution>
							
							<!-- Generates a merged report from <id>merge-data-file</id> -->
							<execution>
								<id>report-merge</id>
								<phase>verify</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${project.reporting.outputDirectory}/jacoco-merge.exec</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${project.reporting.outputDirectory}/jacoco-merge</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<defaultGoal>install</defaultGoal>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${org.springframework.boot.version}</version>
				<executions>
					<execution>
						<goals>
							<!-- Repackage is necessary so we can add this project as dependency for other projects (e.g.: mat-web-test) -->
							<goal>repackage</goal>
						</goals>
						<configuration>
							<classifier>exec</classifier>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<arguments>
						<argument>-cf</argument>
						<argument>${basedir}/src/config/matchandtrade.properties</argument>
					</arguments>
					<configuration>
						<classifier>exec</classifier>
					</configuration>
				</configuration>
			</plugin>
			
			<!-- Unit Tests will test classes ending in *UT -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<parallel>classes</parallel>
					<threadCount>4</threadCount>
					<excludes>
						<exclude>**/*Suite.java</exclude>
						<exclude>**/*Test.java</exclude>
					</excludes>
					<includes>
						<include>**/*UT.java</include>
					</includes>
					<!-- -Xverify:none may reduce startup time. No need to verify bytecode on the test phase -->
					<!-- ${surefireArgLine} jacoco instrumentation -->
					<argLine>-Xverify:none @{surefireArgLine}</argLine>
				</configuration>
			</plugin>

			<!-- Integration Tests will test classes ending in *Suite* -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.19.1</version>
				<executions>
					<execution>
						<id>integration-test-verify</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
					<execution>
						<id>integration-test-execution</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
				</executions>				
				<configuration>
					<parallel>suites</parallel>
					<threadCount>4</threadCount>
					<excludes>
						<exclude>**/*Test.java</exclude>
						<exclude>**/*UT.java</exclude>
					</excludes>
					<includes>
						<include>**/*Suite.java</include>
					</includes>
					<!-- -Xverify:none may reduce startup time. No need to verify bitecode on the test phase -->
					<!-- ${surefireArgLine} jacoco instrumentation -->
					<argLine>-Xverify:none @{failsafeArgLine}</argLine>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
